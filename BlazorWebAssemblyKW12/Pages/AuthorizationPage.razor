@page "/AuthorizationPage"
@using ShopClient
@using Microsoft.AspNetCore.Components
@using Glory.Domain
@using BlazorWebAssemblyKW12.Data;

@inject ClientDTO _client;
@inject NavigationManager _navigation;

@inherits AppComponentBase;

<h3>Authorization</h3>

<EditForm Model="_addFormModel" OnValidSubmit="AuthorizeByPasswordValidAccount">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    
    Почта: <InputText @bind-Value="_addFormModel.Email"></InputText><br/>
    Пароль: <InputText @bind-Value="_addFormModel.Password"></InputText><br/>
    <br/>
    <input type="submit" value="Войти"/>
</EditForm>

@if (!string.IsNullOrEmpty(_codeId))
{
    <EditForm Model="_codeInput" OnValidSubmit="AuthorizeByCodeValidAccount">
        @* <DataAnnotationsValidator/> *@
        @* <ValidationSummary/> *@
        
        Код: <InputNumber @bind-Value="_codeInput"></InputNumber><br/>
        <br/>
        <input type="submit" value="Подтвердить"/>
    </EditForm>
    
}

@if (!string.IsNullOrEmpty(_message))
{
    <h4>@_message</h4> 
}

@code {
    private readonly AccountRequestDTO _addFormModel = new();
    private string? _codeId;
    private int _codeInput;
    private string _message;

    private async Task AuthorizeByPasswordValidAccount()
    {
        _message = "";
        _codeId = await _client.AuthorizeByPassword(
            new AccountRequestDTO(
                _addFormModel.Name,
                _addFormModel.Email,
                _addFormModel.Password));
        if (_codeId.Contains("message"))
        {
            _message = _codeId;
            _codeId = null;
        }
    }

    private async Task AuthorizeByCodeValidAccount()
    {
        _message = "";
        var token = await _client.AuthorizeByCode(
            new TwoFA(Guid.Parse(_codeId), Guid.Empty, _codeInput));
        if (token!.Contains("message"))
        {
            _message = token;
            return;
        }
        
        await SetToken(token);
        _navigation.NavigateTo("MyAccount");
    }
}