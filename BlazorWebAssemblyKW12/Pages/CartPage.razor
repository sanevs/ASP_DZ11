@page "/CartPage"

@using BlazorWebAssemblyKW12.Data
@using Microsoft.EntityFrameworkCore
@using System.Reflection.Metadata.Ecma335

@* @inject ICart _cart; *@
@using Glory.Domain
@using ShopClient
@inject ClientDTO _productsClientDto;

@inherits AppComponentBase;

<h3>Cart</h3>
@* <p>Кол-во продуктов в корзине: @_cart.GetCount()</p> *@
@* <button class="btn-danger" @onclick="() => _cart.Clear()">Очистить</button> *@
@* @foreach (var kvProduct in _cart.GetCartProducts()) *@
@* { *@
@*     <p> *@
@*         <ProductComponent Product="kvProduct.Key"/> *@
@*         @{ _ref = "productpage/" + kvProduct.Key.Name; } *@
@*         <NavLink href=@_ref>Просмотр товара</NavLink> *@
@*         <p>Кол-во: @kvProduct.Value</p> *@
@*         <button class="btn-danger" @onclick="() => _cart.DeleteProduct(kvProduct.Key)">Удалить</button> *@
@*     </p> *@
@* } *@

@if (_cart != null && _cart?.Count >= 0)
{
    <button @onclick="async () => await ClearCart()">Clear cart</button><br/>
    @foreach (var product in _cart)
    {
        <ProductComponent Product="product"/>
        <p>Кол-во: @product.Quantity</p> 
        <button class="btn btn-danger"
                @onclick="async () => await Delete(product)">
            Удалить
        </button>
    }
    <br/>
    <br/>
    <button class="btn-success"
            @onclick="async () => await Send()">
        Chekout, send by email
    </button>
    if (_textSend != null)
    {
        <h5>Order sent!</h5>
    }
}
else
{
    <h4>Раздел только для пользователей, войдите в систему!</h4>
}


@code {
    // private string _ref;

    private IList<ProductDTO>? _cart;
    private string? _textSend;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        try
        {
            _cart = await _productsClientDto.GetCartProducts();
        }
        catch (HttpRequestException){}
        await InvokeAsync(StateHasChanged);
    }

    private async Task Delete(ProductDTO product)
    {
        await _productsClientDto.DeleteFromCart(product);
        await OnInitializedAsync();
    }

    private async Task Send()
    {
        _textSend = await _client.SendOrder();
        await ClearCart();
    }
    private async Task ClearCart()
    {
        await _client.ClearCart();
        await OnInitializedAsync();
    }
}